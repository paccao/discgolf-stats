generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ScoreCard {
  id            Int            @id @default(autoincrement())
  date          DateTime
  courseResults CourseResult[]
  courseId      Int
  course        Course         @relation(fields: [courseId], references: [id])
}

model Course {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String
  location    String
  /// There are usually multiple layouts at a single course location
  layout      String
  baskets     Basket[]
  scoreCards  ScoreCard[]
}

model Basket {
  id       Int     @id @default(autoincrement())
  par      Int
  length   Float
  /// The basket order is unique per Course
  order    Int
  scores   Score[]
  courseId Int
  course   Course  @relation(fields: [courseId], references: [id])
}

model Score {
  id             Int          @id @default(autoincrement())
  /// The number of throws
  count          Int
  courseResultId Int
  basketId       Int
  courseResult   CourseResult @relation(fields: [courseResultId], references: [id])
  basket         Basket       @relation(fields: [basketId], references: [id])
}

model CourseResult {
  id          Int       @id @default(autoincrement())
  scoreCardId Int
  playerId    Int
  scores      Score[]
  scoreCard   ScoreCard @relation(fields: [scoreCardId], references: [id])
  player      Player    @relation(fields: [playerId], references: [id])
}

/// Profile information about the player
model Player {
  id            Int            @id @default(autoincrement())
  name          String
  courseResults CourseResult[]
  userId        Int            @unique
  user          User           @relation(fields: [userId], references: [id])
}

/// Authentication related user data
model User {
  id        Int       @id @default(autoincrement())
  sessionId String
  sessions  Session[]
  playerId  Int       @unique
  player    Player?
}

model Session {
  sessionId String @id @unique
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
}
